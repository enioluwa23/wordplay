{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Wordplay Python package for word searching utilities. Using a convenient API, you can filter a set of strings with detailed criteria. There are also more scrabble-like features such as getting all anagrams of a word. Install pip install wordplay Background I initially built this as an algorithm solely to help my endeavors in word games such as Scrabble. It was useful for finding word combinations in every type of situation. However, I realized it could be used for many other purposes, such as filtering email addresses, phone numbers and any set of data really. So I decided to decouple the API from my personal use. Usage Words are stored in a Dictionary object. Initialize the dictionary with a set of strings (there are no restrictions on what the string can contain) or Dictionary() with no arguments to use the word set sourced from here . In the future, I will amass a couple of word lists and make them options for initializing the dictionary. If you do want restrictions on the string, see the documentation for the Utils module. For complex query parameters, you can use a Criteria object. The class uses the builder pattern, making it easy to construct search parameters. Here is a an example file: from __future__ import print_function from wordplay.dictionary import Dictionary from wordplay.criteria import Criteria def main(): dictionary = Dictionary() result = dictionary.get_words_with_any_letters('diction', 6) print(result) # ['diotic', 'dition', 'indico', 'indict', 'nidiot', 'odinic'] result = dictionary.get_words_with_any_letters('pox') print(result) # ['o', 'op', 'ox', 'p', 'po', 'pox', 'x'] result = dictionary.get_anagrams('aekst') print(result) # ['keats', 'skate', 'skeat', 'stake', 'steak', 'takes', 'teaks'] print('car' in dictionary) # Dictionary is directly iterable # True criteria = Criteria() criteria.begins_with('c').ends_with('s').contains('or') criteria.contains_at(('o', 2), ('r', 4)).size_is(10) result = dictionary.get_words(criteria) print(result) # ['corrosives', 'correlates', 'corrugates'] if __name__ == '__main__': main() For further example usage see the Documentation . To run tests, use pytest . Documentation API Reference License Apache Software License","title":"Home"},{"location":"#wordplay","text":"Python package for word searching utilities. Using a convenient API, you can filter a set of strings with detailed criteria. There are also more scrabble-like features such as getting all anagrams of a word.","title":"Wordplay"},{"location":"#install","text":"pip install wordplay","title":"Install"},{"location":"#background","text":"I initially built this as an algorithm solely to help my endeavors in word games such as Scrabble. It was useful for finding word combinations in every type of situation. However, I realized it could be used for many other purposes, such as filtering email addresses, phone numbers and any set of data really. So I decided to decouple the API from my personal use.","title":"Background"},{"location":"#usage","text":"Words are stored in a Dictionary object. Initialize the dictionary with a set of strings (there are no restrictions on what the string can contain) or Dictionary() with no arguments to use the word set sourced from here . In the future, I will amass a couple of word lists and make them options for initializing the dictionary. If you do want restrictions on the string, see the documentation for the Utils module. For complex query parameters, you can use a Criteria object. The class uses the builder pattern, making it easy to construct search parameters. Here is a an example file: from __future__ import print_function from wordplay.dictionary import Dictionary from wordplay.criteria import Criteria def main(): dictionary = Dictionary() result = dictionary.get_words_with_any_letters('diction', 6) print(result) # ['diotic', 'dition', 'indico', 'indict', 'nidiot', 'odinic'] result = dictionary.get_words_with_any_letters('pox') print(result) # ['o', 'op', 'ox', 'p', 'po', 'pox', 'x'] result = dictionary.get_anagrams('aekst') print(result) # ['keats', 'skate', 'skeat', 'stake', 'steak', 'takes', 'teaks'] print('car' in dictionary) # Dictionary is directly iterable # True criteria = Criteria() criteria.begins_with('c').ends_with('s').contains('or') criteria.contains_at(('o', 2), ('r', 4)).size_is(10) result = dictionary.get_words(criteria) print(result) # ['corrosives', 'correlates', 'corrugates'] if __name__ == '__main__': main() For further example usage see the Documentation . To run tests, use pytest .","title":"Usage"},{"location":"#documentation","text":"API Reference","title":"Documentation"},{"location":"#license","text":"Apache Software License","title":"License"},{"location":"api/criteria/","text":"wordplay.criteria Criteria Criteria(self, original=None) Class providing an interface for building search parameters. begins_with Criteria.begins_with(self, arg) Set letter or alphabetic string the word should begin with. remove_begins_with Criteria.remove_begins_with(self, arg=None) Remove part or the whole of what the word should begin with. ends_with Criteria.ends_with(self, arg) Set letter or alphabetic string the word should end with. remove_ends_with Criteria.remove_ends_with(self, arg=None) Remove part or the whole of what the word should end with. contains Criteria.contains(self, *args) Add letter(s) or alphabetic strings the word should contain. contains_at Criteria.contains_at(self, *args) Add tuple(s) of (str letter, int position_in_word) e.g (a, 1) remove_contains Criteria.remove_contains(self, *args) Remove part or the whole of what the word should contain. remove_contains_at Criteria.remove_contains_at(self, *args) Remove part or the whole positional criteria the word should fulfill. size_is Criteria.size_is(self, arg) Set what the int size/length of the word should be. remove_size Criteria.remove_size(self) Remove the size restriction on the word.","title":"Criteria"},{"location":"api/dictionary/","text":"Dictionary Dictionary(self, word_list=None) Class providing utilities for finding words with criteria. get_words Dictionary.get_words(self, criteria) Gets words from its wordlist given valid search criteria. Args: criteria ( Criteria ): Object containing search parameters Returns: A list of words from its wordlist matching the criteria Raises: ArgumentError : If arg is not of type Criteria get_words_with_any_letters Dictionary.get_words_with_any_letters(self, word, length=None, sort_order=<SortOrder.ASCENDING: 1>, sort_type=<SortType.ALPHA: 2>) Gets words from its wordlist that contain any of the letters in word Args: word ( str ): Letters to pool words from Returns: A list of words from its wordlist containing any letters in word Raises: ArgumentError get_words_within Dictionary.get_words_within(self, word, length=None, sort_order=<SortOrder.ASCENDING: 1>, sort_type=<SortType.ALPHA: 2>) Gets words from its wordlist that are substrings of word Args: word ( str ): Letters to pool words from Returns: A list of words from its wordlist that are substrings of word Raises: ArgumentError get_anagrams Dictionary.get_anagrams(self, word, sort_order=<SortOrder.ASCENDING: 1>, sort_type=<SortType.ALPHA: 2>) Gets all anagrams of a word from the wordlist Args: word ( str ): Letters to pool words from Returns: A list of words from its wordlist that are anagrams of word Raises: ArgumentError SortOrder SortOrder(self, /, *args, **kwargs) Enum class providing order options for sorting. Options: ASCENDING - A-Z, 0-9 DESCENDING - Z-A, 9-0 SortType SortType(self, /, *args, **kwargs) Enum class providing options for sorting. Options: SIZE - Sort by Size ALPHA - Sort in Alphabetical Order","title":"Dictionary"},{"location":"api/utils/","text":"Utils Utils(self, /, *args, **kwargs) Class providing utility functions for argument validation. validate_args Utils.validate_args(*args) Verifies string, tuple and list args are valid string constructors. Args: *args ( tuple ): Variadic tuple of arguments to be validated Raises: ArgumentError : if argument is invalid is_positive_integer Utils.is_positive_integer(arg) Verifies argument is a valid int constructor. Args: arg ( int or str ): Argument to be validated Returns: True if valid False if invalid add_disallowed_char Utils.add_disallowed_char(arg) Add character that cannot be used in search. Args: arg ( str ): character to be added Raises: ArgumentError : if arg is not of type str remove_disallowed_char Utils.remove_disallowed_char(arg) Make a previously disallowed search character valid. Args: arg ( str ): character to be removed Raises: ArgumentError : if arg is not of type str set_disallowed_chars Utils.set_disallowed_chars(arg) Override existing set of disallowed search characters. Args: arg ( set ): set of characters Raises: ArgumentError : if any char in set is empty or len(char) > 1 is_allowed_char Utils.is_allowed_char(arg) Verifies character is an allowed. Args: arg ( str ): character to be validated Returns: True if valid False if invalid Raises: ArgumentError : if arg is not of type str is_allowed_str Utils.is_allowed_str(arg) Verifies string is an allowed. Args: arg ( str ): string to be validated Returns: True if valid False if invalid","title":"Utils"}]}